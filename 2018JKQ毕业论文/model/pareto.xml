<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>const int RATE=200; 
// the temperature of environment
//int u=6;
clock u;
//5room and 3heater
const int RN=5; // number of rooms
const int HN=3; // number of heaters
const int scale = 100;
typedef int[1,RN] rid_t;
typedef int[1,HN] hid_t;
broadcast chan on[rid_t],off[rid_t];
broadcast chan move[rid_t]; // leads to zeno runs if marked urgent
//urgent broadcast chan ASAP; // leads to zeno runs if marked urgent

typedef struct {
  int Toff, Ton, Tget, Tlow;
} tempconf_t;

//temperature of room
clock T[rid_t], discomfort, energy;

bool need[rid_t];
bool cold[rid_t];

// the initial placement of heaters
int h[rid_t]={0,0,0,0,0};
const int h0[rid_t]={1,0,1,0,1};
const rid_t r0[hid_t] = {1, 3, 5}; // heater location in terms of room id
int H[rid_t] = {1,0,2,0,3}; // heater id by room

rid_t target;

//the vector of the heating capability of a heater in a particular room
//const int cvec[rid_t]={80,60,100};
//const int cvec[rid_t]={80,80,80};
//const int cvec[rid_t]={1000,1200,1300,1100,800}; // heater contribution
const int cvec[rid_t]={900,1100,900,1200,600};
//int bvec[rid_t]={25,10,15,20,40};    // environment contribution
int bvecbase[rid_t]={35,10,15,30,25}; 
double bvec[rid_t]={35.0,10.0,15.0,30.0,25.0};   
int Ton[rid_t] ={19, 19, 19, 19, 19};   // temp to turn on the heater
int Toff[rid_t]={21, 21, 21, 21, 21};    // temp to turn off the heater
int Tget[rid_t] ={16, 17, 18, 17, 16};    // temp at which to get a heater
int Tlow[rid_t]={15, 16, 16, 16, 15};// critical temp lower bound

/*
//with user
int Ton[rid_t] ={5,5,5,5, 5};
int Toff[rid_t]={7,7,7,7,7};
int Tlow[rid_t]={4, 4, 4,4,4};
*/

//difference in temperature at which to get the heater
const int dif[rid_t]={1,1,1,1,1};
// matrix of exchange coefficients??
//const int Amat[3][3]={{0,8,6},{8,0,7},{6,7,0}};
//const int Amat[rid_t][rid_t]={{0,30,0,50,0},{30,0,20,0,20},{0,20,0,30,50},{0,0,30,0,40},{50,20,50,40,0}};
const int Amat[rid_t][rid_t]={{0,30,0,50,60},{30,0,20,0,20},{0,20,0,30,50},{50,0,30,0,0},{60,20,50,0,0}};
const int T0[rid_t] = { 18, 18, 18, 18, 18 }; //initial room temp

// when turnoff , the change of the temperature decreasing
// time units in hours:
const int day = 24;
const int year = 365*day;
const int month = year/12;
//const int LATENCY=1/60; // 1/60=0 !!
clock PI;

/**
* Danish last decade weather averages:
* http://www.dmi.dk/dmi/index/danmark/klimanormaler/vejrnormaler.htm
*/
// monthly average curve:
const int year_avg = 88;      //  +8.8C
const int month_avg_min = 12; //  +1.2C
const int month_avg_max = 174;// +17.4C
const int month_offset = 86*month/10;  //  +8.6 months in hours

// monthly day average deviation from average:
const int day_dev_avg = 31; // 3.1C
const int day_dev_min = 18; // 1.8C
const int day_dev_max = 42; // 4.2C
const int day_offset = 97*month/10;  // +9.7 months in hours

// monthly night average deviation from average:
const int night_dev_avg = -33; // -3.3C
const int night_dev_min = -40; // -4.0C
const int night_dev_max = -23; // -2.3C
const int night_offset = 35*month/10;   // +3.5 months in hours

const int hour_offset = -9; // at 9:00 is the middle day temp

/*const tempconf_t tday[rid_t] = {
{ 20, 17, 18, 15 },
{ 20, 17, 17, 16 },
{ 20, 17, 16, 15 },
{ 20, 17, 17, 16 },
{ 20, 17, 18, 16 }
};*/
tempconf_t tday[rid_t] = {
{ 23, 18, 18, 17 },
{ 23, 18, 17, 16 },
{ 23, 18, 18, 17 },
{ 23, 18, 17, 16 },
{ 23, 18, 18, 17 }
};
const tempconf_t tnight[rid_t] = {
{ 10, 8, 6, 5 },
{ 10, 8, 6, 5 },
{ 10, 8, 6, 5 },
{ 10, 8, 6, 5 },
{ 10, 8, 6, 5 }
};

typedef int[16,22] onRange_t;
typedef int[16,22] getRange_t;
</declaration>
	<template>
		<name>Room</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock dt,r; // temporary clock

void cool()
{
   r = bvec[id]*(u+-T[id]) * 1.0/scale;
   for(j:rid_t)
      r = r + Amat[id][j]*(T[j]+ -T[id]) * 1.0/scale;
   T[id] = T[id] + r * dt;
   dt = 0;
}

//when turnon, the change of temperature increaing
void heat()
{
   r = (cvec[id]*h[id] + bvec[id]*(u+-T[id])) *1.0/scale;
   for(j:rid_t)
     r = r + Amat[id][j]*(T[j]+ -T[id]) * 1.0/scale;
   T[id] = T[id] + r * dt;
   dt = 0;
}
</declaration>
		<location id="id0" x="722" y="527">
			<urgent/>
		</location>
		<location id="id1" x="722" y="647">
			<label kind="invariant" x="603" y="680">T[id]' == (cvec[id]*h[id] + bvec[id]*(u+-T[id]) 
+ sum(j:rid_t)(Amat[id][j]*(T[j]+ -T[id])))/scale</label>
			<label kind="exponentialrate" x="697" y="655">30</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="799" y="604">cold[id] &amp;&amp;
T[id] &gt;= Tlow[id]</label>
			<label kind="assignment" x="799" y="646">cold[id]=false</label>
			<nail x="786" y="607"/>
			<nail x="786" y="647"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="799" y="519">need[id] &amp;&amp;
T[id] &gt; Tget[id]</label>
			<label kind="assignment" x="799" y="561">need[id]=false</label>
			<nail x="786" y="567"/>
			<nail x="786" y="519"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="552" y="502">!need[id] &amp;&amp;
H[id]==0 &amp;&amp; 
T[id]&lt;=Tget[id]</label>
			<label kind="assignment" x="561" y="561">need[id]=true</label>
			<nail x="650" y="567"/>
			<nail x="650" y="519"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="552" y="604">!cold[id] &amp;&amp;
T[id] &lt; Tlow[id]</label>
			<label kind="assignment" x="561" y="646">cold[id]=true</label>
			<nail x="658" y="607"/>
			<nail x="658" y="647"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="682" y="543">T[id]=T0[id]</label>
		</transition>
	</template>
	<template>
		<name>Heater</name>
		<parameter>const hid_t id</parameter>
		<declaration>rid_t r = r0[id];
clock c; // for each heater, the energy consumption
</declaration>
		<location id="id2" x="48" y="104">
			<committed/>
		</location>
		<location id="id3" x="128" y="0">
			<name x="136" y="8">On</name>
			<label kind="invariant" x="136" y="42">c'==5</label>
			<label kind="exponentialrate" x="136" y="25">60</label>
		</location>
		<location id="id4" x="-48" y="0">
			<name x="-76" y="8">Off</name>
			<label kind="invariant" x="-85" y="42">c'==0</label>
			<label kind="exponentialrate" x="-76" y="25">60</label>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-34" y="68">off[r]!</label>
			<label kind="assignment" x="-34" y="85">h[r]=0,
r=target</label>
			<nail x="-48" y="104"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="68" y="85">move[r]?</label>
			<nail x="128" y="104"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-119" y="-59">move[r]?</label>
			<label kind="assignment" x="-119" y="-42">r=target</label>
			<nail x="-51" y="-51"/>
			<nail x="-93" y="0"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="0" y="16">T[r]&gt;=Toff[r]</label>
			<label kind="synchronisation" x="17" y="34">off[r]!</label>
			<label kind="assignment" x="17" y="51">h[r]=0</label>
			<nail x="96" y="32"/>
			<nail x="-8" y="32"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="0" y="-56">T[r]&lt;=Ton[r]</label>
			<label kind="synchronisation" x="17" y="-34">on[r]!</label>
			<label kind="assignment" x="17" y="-17">h[r]=1</label>
			<nail x="-8" y="-32"/>
			<nail x="96" y="-32"/>
		</transition>
	</template>
	<template>
		<name>ControlOriginal</name>
		<declaration>int importance[rid_t]={ 1, 30, 2, 3, 4};</declaration>
		<location id="id5" x="-344" y="8">
			<name x="-382" y="0">idle</name>
			<label kind="exponentialrate" x="-382" y="17">100</label>
		</location>
		<location id="id6" x="0" y="8">
			<name x="16" y="-8">choosing</name>
			<label kind="exponentialrate" x="16" y="8">100</label>
		</location>
		<branchpoint id="id7" x="-153" y="8">
		</branchpoint>
		<init ref="id5"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-246" y="-68">!need[target] || H[target]&gt;0</label>
			<nail x="-8" y="-42"/>
			<nail x="-340" y="-42"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="select" x="-127" y="-24">i:rid_t</label>
			<label kind="assignment" x="-127" y="-8">target=i</label>
			<label kind="probability" x="-127" y="8">importance[i]*
(H[i]==0)*need[i]</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id7"/>
			<label kind="select" x="-306" y="-25">i:rid_t, j:rid_t</label>
			<label kind="guard" x="-323" y="-8">need[i] &amp;&amp; H[i]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]-T[i]&gt;=dif[i]</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="select" x="-280" y="34">j:rid_t</label>
			<label kind="guard" x="-280" y="51">need[target] &amp;&amp; H[target]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]-T[target]&gt;=dif[target]</label>
			<label kind="synchronisation" x="-280" y="85">move[j]!</label>
			<label kind="assignment" x="-280" y="102">H[target]=H[j], H[j]=0</label>
			<nail x="-8" y="73"/>
			<nail x="-340" y="73"/>
		</transition>
	</template>
	<template>
		<name>ControlGet</name>
		<declaration>int importance[rid_t]={ 1, 30, 2, 3, 4};</declaration>
		<location id="id8" x="-344" y="8">
			<name x="-392" y="0">idle</name>
			<label kind="exponentialrate" x="-392" y="16">100</label>
		</location>
		<location id="id9" x="0" y="8">
			<name x="16" y="-8">choosing</name>
			<label kind="exponentialrate" x="16" y="8">100</label>
		</location>
		<branchpoint id="id10" x="-144" y="8">
		</branchpoint>
		<init ref="id8"/>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-320" y="-72">!need[target] || H[target]&gt;0</label>
			<nail x="0" y="-48"/>
			<nail x="-344" y="-48"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="select" x="-128" y="-24">i:rid_t</label>
			<label kind="assignment" x="-128" y="-8">target=i</label>
			<label kind="probability" x="-128" y="8">importance[i]*
(H[i]==0)*need[i]</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id10"/>
			<label kind="select" x="-320" y="-32">i:rid_t, j:rid_t</label>
			<label kind="guard" x="-320" y="-8">need[i] &amp;&amp; H[i]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]&gt;=Tget[j]</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="select" x="-320" y="48">j:rid_t</label>
			<label kind="guard" x="-320" y="64">need[target] &amp;&amp; H[target]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]&gt;=Tget[j]</label>
			<label kind="synchronisation" x="-320" y="104">move[j]!</label>
			<label kind="assignment" x="-320" y="120">H[target]=H[j], H[j]=0</label>
			<nail x="0" y="104"/>
			<nail x="-344" y="104"/>
		</transition>
	</template>
	<template>
		<name>ControlTon</name>
		<declaration>int importance[rid_t]={ 1, 30, 2, 3, 4};</declaration>
		<location id="id11" x="-344" y="8">
			<name x="-392" y="0">idle</name>
			<label kind="exponentialrate" x="-392" y="16">100</label>
		</location>
		<location id="id12" x="64" y="8">
			<name x="80" y="-8">choosing</name>
			<label kind="exponentialrate" x="80" y="8">100</label>
		</location>
		<branchpoint id="id13" x="-112" y="8">
		</branchpoint>
		<init ref="id11"/>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="guard" x="-168" y="-64">!need[target] || H[target]&gt;0</label>
			<nail x="64" y="-48"/>
			<nail x="-344" y="-48"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="select" x="-96" y="-24">i:rid_t</label>
			<label kind="assignment" x="-96" y="-8">target=i</label>
			<label kind="probability" x="-96" y="8">importance[i]*
(H[i]==0)*need[i]</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="select" x="-304" y="-32">i:rid_t, j:rid_t</label>
			<label kind="guard" x="-320" y="-8">need[i] &amp;&amp; H[i]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]&gt;=Ton[j]</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id11"/>
			<label kind="select" x="-208" y="56">j:rid_t</label>
			<label kind="guard" x="-208" y="72">need[target] &amp;&amp; H[target]==0 &amp;&amp;
H[j]&gt;0 &amp;&amp; T[j]&gt;=Ton[j]</label>
			<label kind="synchronisation" x="-208" y="104">move[j]!</label>
			<label kind="assignment" x="-208" y="120">H[target]=H[j], H[j]=0</label>
			<nail x="64" y="104"/>
			<nail x="-344" y="104"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Weather</name>
		<parameter>clock &amp;T</parameter>
		<declaration>clock PI, t;

void update() {
    PI=3.14159265;
    T = 2.0 + 2.0*sin((t+hour_offset)*2*PI/day);
}

</declaration>
		<location id="id14" x="-568" y="-72">
			<label kind="invariant" x="-584" y="-40">T'==0 &amp;&amp;
PI'==0</label>
			<label kind="exponentialrate" x="-584" y="-56">60 // roughly once every minute</label>
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="assignment" x="-552" y="-128">update()</label>
			<nail x="-568" y="-112"/>
			<nail x="-480" y="-112"/>
			<nail x="-480" y="-72"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherFlat</name>
		<parameter>clock &amp;T</parameter>
		<location id="id15" x="-568" y="-144">
			<urgent/>
		</location>
		<location id="id16" x="-568" y="-56">
			<label kind="invariant" x="-584" y="-40">T'==0</label>
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="assignment" x="-632" y="-120">T=-2.0*1</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherRapid</name>
		<parameter>clock &amp;T</parameter>
		<declaration>clock PI, t;</declaration>
		<location id="id17" x="-568" y="-72">
			<label kind="invariant" x="-576" y="-40">T'==0 &amp;&amp;
PI'==0</label>
			<label kind="exponentialrate" x="-576" y="-56">60 // ~1/minute</label>
		</location>
		<init ref="id17"/>
		<transition>
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="assignment" x="-552" y="-128">PI=3.14159265,
T=-1+1.0*sin(t*2*PI)</label>
			<nail x="-568" y="-112"/>
			<nail x="-480" y="-112"/>
			<nail x="-480" y="-72"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherDaily</name>
		<parameter>clock &amp;T</parameter>
		<declaration>clock PI, t, A, B;

void update() {
    PI=3.14159265;
    T = -1.0 + 1.0*sin((t+hour_offset)*2*PI/day);
}

</declaration>
		<location id="id18" x="-910" y="-153">
			<committed/>
		</location>
		<location id="id19" x="-782" y="-153">
			<label kind="invariant" x="-782" y="-129">T'==0 &amp;&amp;
PI'==0 &amp;&amp;
A'==0 &amp;&amp;
B'==0</label>
			<label kind="exponentialrate" x="-782" y="-145">60 // ~1/minute</label>
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="assignment" x="-910" y="-145">A=random(2),
B=random(1)</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="assignment" x="-782" y="-209">PI=3.14159265,
T=A*sin((t+hour_offset)*2*PI/day)-B</label>
			<nail x="-782" y="-193"/>
			<nail x="-694" y="-193"/>
			<nail x="-694" y="-153"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherComplex</name>
		<parameter>clock &amp;T, clock &amp;cyclon</parameter>
		<declaration>const int scale_deg = 10; // scale for degree constants
clock t, avg, day_dev, night_dev;

void update() {
    avg = year_avg + (month_avg_max-month_avg_min)*sin((t+month_offset)*2*PI/year)/2;
    day_dev = day_dev_avg + (day_dev_max-day_dev_min)*sin((t+day_offset)*2*PI/year)/2;
    night_dev = night_dev_avg + (night_dev_max-night_dev_min)*sin((t+night_offset)*2*PI/year)/2;
    T = (avg + (day_dev+ -night_dev)/2*sin((t+hour_offset)*2*PI/day)) / scale_deg + cyclon*1;
}

</declaration>
		<location id="id20" x="-568" y="-72">
			<label kind="invariant" x="-584" y="-40">T'==0</label>
			<label kind="exponentialrate" x="-584" y="-56">60 // roughly once every minute</label>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id20"/>
			<target ref="id20"/>
			<label kind="assignment" x="-552" y="-128">update()</label>
			<nail x="-568" y="-112"/>
			<nail x="-480" y="-112"/>
			<nail x="-480" y="-72"/>
		</transition>
	</template>
	<template>
		<name>WeatherReal</name>
		<parameter>clock &amp;T</parameter>
		<declaration>clock  t;
double e,Gauss1,Gauss2,Gauss3;
void update() {
    e = 2.71828;
    Gauss1 = -((t-23.16)/ 11.58)*((t-23.16)/ 11.58);
    Gauss2 = -((t-14.24)/ 6.194)*((t-14.24)/ 6.194);
    Gauss3 = -((t+1.212)/ 5.069)*((t+1.212)/ 5.069);
    T = 3.868*pow(e,Gauss1)+8.556*pow(e,Gauss2)+6.057*pow(e,Gauss3);
}

</declaration>
		<location id="id21" x="-1410" y="-1431">
			<label kind="invariant" x="-1426" y="-1399">T'==0</label>
			<label kind="exponentialrate" x="-1426" y="-1415">60 // roughly once every minute</label>
		</location>
		<init ref="id21"/>
		<transition>
			<source ref="id21"/>
			<target ref="id21"/>
			<label kind="assignment" x="-1394" y="-1487">update()</label>
			<nail x="-1410" y="-1471"/>
			<nail x="-1322" y="-1471"/>
			<nail x="-1322" y="-1431"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Cyclon</name>
		<parameter>clock &amp;cyclon_a</parameter>
		<declaration>int shift;
clock period, cyclon_b;</declaration>
		<location id="id22" x="-736" y="-72">
			<committed/>
		</location>
		<location id="id23" x="-544" y="-72">
			<name x="-560" y="-56">L</name>
			<label kind="invariant" x="-560" y="-40">PI'==0 &amp;&amp; 
period'==shift &amp;&amp;
cyclon_a'==2*PI*cyclon_b/period &amp;&amp;
cyclon_b'==-2*PI*cyclon_a/period</label>
			<label kind="exponentialrate" x="-528" y="-64">1</label>
		</location>
		<branchpoint id="id24" x="-544" y="-184">
		</branchpoint>
		<init ref="id22"/>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="assignment" x="-528" y="-200">shift=-1</label>
			<label kind="probability" x="-528" y="-184">1</label>
			<nail x="-472" y="-184"/>
			<nail x="-472" y="-144"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id23"/>
			<label kind="assignment" x="-608" y="-200">shift=1</label>
			<label kind="probability" x="-608" y="-184">1</label>
			<nail x="-616" y="-184"/>
			<nail x="-616" y="-144"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id24"/>
			<label kind="guard" x="-592" y="-152">period&gt;=2*day &amp;&amp;
period&lt;=6*day</label>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id23"/>
			<label kind="guard" x="-440" y="-128">period&gt;6*day</label>
			<label kind="assignment" x="-440" y="-112">shift=-2</label>
			<nail x="-456" y="-120"/>
			<nail x="-440" y="-96"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id23"/>
			<label kind="guard" x="-728" y="-128">period&lt;2*day</label>
			<label kind="assignment" x="-728" y="-112">shift=2</label>
			<nail x="-656" y="-96"/>
			<nail x="-640" y="-128"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="assignment" x="-720" y="-72">PI=3.14159265,
shift=1,
period=1.0*year/100,
cyclon_a=0,
cyclon_b=1</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">WeatherNotWorking</name>
		<parameter>clock &amp;T</parameter>
		<declaration>// this weather model is not working due to absence of algebraic function support
int scale_deg = 10; // scale for degree constants
clock t, cyclonp, period;
int shift;


/*
clock t, avg, day_dev, night_dev;

void update() {
    avg = year_avg + (month_avg_max-month_avg_min)*sin((t+month_offset)*2*PI/year)/2;
    day_dev = day_dev_avg + (day_dev_max-day_dev_min)*sin((t+day_offset)*2*PI/year)/2;
    night_dev = night_dev_avg + (night_dev_max-night_dev_min)*sin((t+night_offset)*2*PI/year)/2;
    T = (avg + (day_dev+ -night_dev)/2*sin((t+hour_offset)*2*PI/day)) / scale_deg + cyclon*1;
}

*/</declaration>
		<location id="id25" x="-568" y="192">
			<urgent/>
		</location>
		<location id="id26" x="-568" y="-72">
			<name x="-584" y="-64">L</name>
			<label kind="invariant" x="-624" y="-24">PI'==0 &amp;&amp;
cyclonp'==shift &amp;&amp;
T'== (year_avg + (month_avg_max-month_avg_min)*cos((t)*2*PI/year)/2
          + (day_dev_avg + (day_dev_max-day_dev_min)*cos((t)*2*PI/year)/2+ 
               -night_dev_avg + (night_dev_max-night_dev_min)*cos((t)*2*PI/year)/2)/2*cos((t)*2*PI/day)) / scale_deg 
         + 1*cos(t*2*PI/cyclonp)</label>
			<label kind="exponentialrate" x="-616" y="-48">60 // roughly once every minute</label>
		</location>
		<branchpoint id="id27" x="-568" y="-224">
		</branchpoint>
		<init ref="id25"/>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="assignment" x="-728" y="80">PI=3.1412659,
cyclonp=365.0/100,
T= (year_avg + (month_avg_max-month_avg_min)*sin((month_offset)*2*PI/year)/2
          + (day_dev_avg +    (day_dev_max-day_dev_min)*sin((day_offset)*2*PI/year)/2+ 
              -night_dev_avg + (night_dev_max-night_dev_min)*sin((night_offset)*2*PI/year)/2)/2*sin((hour_offset)*2*PI/day)) / scale_deg</label>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id26"/>
			<label kind="guard" x="-728" y="-200">period&lt;=2*day</label>
			<label kind="assignment" x="-728" y="-184">shift=1</label>
			<nail x="-704" y="-112"/>
			<nail x="-704" y="-200"/>
			<nail x="-640" y="-200"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id26"/>
			<label kind="guard" x="-488" y="-184">period&gt;=6*day</label>
			<label kind="assignment" x="-488" y="-168">shift=-1</label>
			<nail x="-440" y="-96"/>
			<nail x="-440" y="-184"/>
			<nail x="-512" y="-184"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="assignment" x="-472" y="-240">shift=-1</label>
			<label kind="probability" x="-544" y="-248">1</label>
			<nail x="-376" y="-224"/>
			<nail x="-376" y="-80"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id26"/>
			<label kind="assignment" x="-720" y="-240">shift=1</label>
			<label kind="probability" x="-600" y="-248">1</label>
			<nail x="-728" y="-224"/>
			<nail x="-728" y="-96"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id27"/>
			<label kind="guard" x="-600" y="-208">period&gt;2*day &amp;&amp;
period&lt;6*day</label>
		</transition>
	</template>
	<template>
		<name>FlatProfile</name>
		<parameter>const rid_t id</parameter>
		<location id="id28" x="-424" y="-32">
			<urgent/>
		</location>
		<location id="id29" x="-224" y="-32">
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="assignment" x="-408" y="-32">Toff[id]=tday[id].Toff,
Ton[id]=tday[id].Ton,
Tget[id]=tday[id].Tget,
Tlow[id]=tday[id].Tlow</label>
		</transition>
	</template>
	<template>
		<name>UserProfile</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock t, x;</declaration>
		<location id="id30" x="-535" y="-297">
			<urgent/>
		</location>
		<location id="id31" x="-535" y="-85">
			<name x="-583" y="-109">arrive</name>
			<label kind="invariant" x="-551" y="-69">t&lt;=9</label>
		</location>
		<location id="id32" x="-95" y="-204">
			<name x="-111" y="-252">leave</name>
			<label kind="invariant" x="-111" y="-236">t&lt;=24</label>
		</location>
		<location id="id33" x="-95" y="-84">
			<name x="-135" y="-116">afternoon</name>
			<label kind="invariant" x="-119" y="-68">t&lt;=18</label>
		</location>
		<location id="id34" x="-231" y="-84">
			<name x="-247" y="-116">lunch</name>
			<label kind="invariant" x="-247" y="-68">x&lt;=1</label>
		</location>
		<location id="id35" x="-359" y="-84">
			<name x="-391" y="-116">morning</name>
			<label kind="invariant" x="-383" y="-68">t&lt;=13</label>
		</location>
		<location id="id36" x="-535" y="-204">
			<name x="-591" y="-220">absent</name>
			<label kind="invariant" x="-591" y="-204">t&lt;=5</label>
		</location>
		<init ref="id30"/>
		<transition>
			<source ref="id30"/>
			<target ref="id36"/>
			<label kind="assignment" x="-535" y="-284">Toff[id]=tnight[id].Toff,
Ton[id]=tnight[id].Ton,
Tget[id]=tnight[id].Tget,
Tlow[id]=tnight[id].Tlow</label>
		</transition>
		<transition>
			<source ref="id36"/>
			<target ref="id31"/>
			<label kind="guard" x="-535" y="-172">t==5</label>
			<label kind="assignment" x="-535" y="-156">Toff[id]=tday[id].Toff,
Ton[id]=tday[id].Ton,
Tget[id]=tday[id].Tget</label>
		</transition>
		<transition>
			<source ref="id32"/>
			<target ref="id36"/>
			<label kind="guard" x="-279" y="-228">t==24</label>
			<label kind="assignment" x="-271" y="-204">t=0</label>
		</transition>
		<transition>
			<source ref="id33"/>
			<target ref="id32"/>
			<label kind="guard" x="-191" y="-188">t&gt;=17</label>
			<label kind="assignment" x="-239" y="-172">Toff[id]=tnight[id].Toff,
Ton[id]=tnight[id].Ton,
Tget[id]=tnight[id].Tget,
Tlow[id]=tnight[id].Tlow</label>
		</transition>
		<transition>
			<source ref="id34"/>
			<target ref="id33"/>
			<label kind="guard" x="-199" y="-100">x&gt;0</label>
			<label kind="assignment" x="-199" y="-84">x=0,
bvec[id]=bvec[id]+1.0</label>
		</transition>
		<transition>
			<source ref="id35"/>
			<target ref="id34"/>
			<label kind="guard" x="-327" y="-100">t&gt;=12</label>
			<label kind="assignment" x="-323" y="-85">x=0, 
bvec[id]=bvec[id]+1.0</label>
		</transition>
		<transition>
			<source ref="id31"/>
			<target ref="id35"/>
			<label kind="guard" x="-519" y="-100">t&gt;=8</label>
			<label kind="assignment" x="-519" y="-84">Tlow[id]=tday[id].Tlow</label>
		</transition>
	</template>
	<template>
		<name>MultiUserProfile</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock t, x;
double e,Gauss1,Gauss2,Gauss3,Gauss4,Gauss5,Gauss6,Gauss7,Gauss; 
void userUpdate(){
    e = 2.71828;
    x = t - 7;
    Gauss1 = -((x-9.084)/ 1.95)*((x-9.084)/ 1.95);
    Gauss2 = -((x-3.631)/ 1.246)*((x-3.631)/ 1.246);
    Gauss3 = -((x-4.743)/ 0.5913)*((x-4.743)/ 0.5913);
    Gauss4 = -((x-6.301)/ 0.6582)*((x-6.301)/ 0.6582);
    Gauss5 = -((x-1.984)/ 1.018)*((x-1.984)/ 1.018);
    Gauss6 = -((x-7.158)/ 1.116)*((x-7.158)/ 1.116);
    Gauss7 = -((x-12.03)/ 3.321)*((x-12.03)/ 3.321);
    Gauss = 636.2*pow(e,Gauss1)+686.4*pow(e,Gauss2)+366.4*pow(e,Gauss3)+329*pow(e,Gauss4)+539.2*pow(e,Gauss5)+409.5*pow(e,Gauss6)+150.9*pow(e,Gauss7);
    bvec[id] = bvecbase[id]+0.01*Gauss;
}

void controlUpdate1() {
    Toff[id]=tnight[id].Toff;
    Ton[id]=tnight[id].Ton;
    Tget[id]=tnight[id].Tget;
    Tlow[id]=tnight[id].Tlow;
}

void controlUpdate2() {
    Toff[id]=tday[id].Toff;
    Ton[id]=tday[id].Ton;
    Tget[id]=tday[id].Tget;
}

void controlUpdate3() {
    Tlow[id]=tday[id].Tlow;
}</declaration>
		<location id="id37" x="-476" y="-136">
			<urgent/>
		</location>
		<location id="id38" x="-391" y="-42">
			<name x="-439" y="-66">arrive</name>
			<label kind="invariant" x="-408" y="-25">t&lt;=9</label>
		</location>
		<location id="id39" x="-68" y="-136">
			<name x="-51" y="-153">leave</name>
			<label kind="invariant" x="-85" y="-170">t&lt;=24</label>
		</location>
		<location id="id40" x="-68" y="-42">
			<name x="-136" y="-76">afternoon</name>
			<label kind="invariant" x="-59" y="-68">t&lt;=22</label>
		</location>
		<location id="id41" x="-212" y="-42">
			<name x="-244" y="-74">morning</name>
			<label kind="invariant" x="-229" y="-25">t&lt;=13</label>
		</location>
		<location id="id42" x="-391" y="-136">
			<name x="-382" y="-161">absent</name>
			<label kind="invariant" x="-425" y="-127">t&lt;=5</label>
		</location>
		<init ref="id37"/>
		<transition>
			<source ref="id41"/>
			<target ref="id40"/>
			<label kind="guard" x="-161" y="-42">t&gt;=12</label>
			<label kind="assignment" x="-178" y="-25">userUpdate()</label>
		</transition>
		<transition>
			<source ref="id37"/>
			<target ref="id42"/>
			<label kind="assignment" x="-518" y="-170">controlUpdate1()</label>
		</transition>
		<transition>
			<source ref="id42"/>
			<target ref="id38"/>
			<label kind="guard" x="-425" y="-93">t==5</label>
			<label kind="assignment" x="-382" y="-93">controlUpdate2()</label>
		</transition>
		<transition>
			<source ref="id39"/>
			<target ref="id42"/>
			<label kind="guard" x="-153" y="-153">t==24</label>
			<label kind="assignment" x="-144" y="-136">t=0</label>
		</transition>
		<transition>
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="guard" x="-59" y="-102">t==22</label>
			<label kind="assignment" x="-178" y="-102">controlUpdate1()</label>
		</transition>
		<transition>
			<source ref="id38"/>
			<target ref="id41"/>
			<label kind="guard" x="-323" y="-42">t&gt;=7</label>
			<label kind="assignment" x="-365" y="-25">controlUpdate3(),
   userUpdate()</label>
		</transition>
	</template>
	<template>
		<name>ProbUserProfile</name>
		<parameter>const rid_t id</parameter>
		<declaration>clock t,x;</declaration>
		<location id="id43" x="-297" y="-136">
			<urgent/>
		</location>
		<location id="id44" x="-297" y="80">
			<name x="-345" y="56">arrive</name>
			<label kind="invariant" x="-313" y="96">t&lt;=9</label>
		</location>
		<location id="id45" x="143" y="-40">
			<name x="127" y="-88">leave</name>
			<label kind="invariant" x="127" y="-72">t&lt;=24</label>
		</location>
		<location id="id46" x="143" y="80">
			<name x="103" y="48">afternoon</name>
			<label kind="invariant" x="119" y="96">t&lt;=18</label>
		</location>
		<location id="id47" x="7" y="80">
			<name x="-34" y="51">lunch</name>
			<label kind="invariant" x="-9" y="96">x&lt;=1</label>
		</location>
		<location id="id48" x="-121" y="80">
			<name x="-153" y="48">morning</name>
			<label kind="invariant" x="-145" y="96">t&lt;=13</label>
		</location>
		<location id="id49" x="-297" y="-40">
			<name x="-353" y="-56">absent</name>
			<label kind="invariant" x="-353" y="-40">t&lt;=5</label>
		</location>
		<branchpoint id="id50" x="68" y="25">
		</branchpoint>
		<init ref="id43"/>
		<transition>
			<source ref="id50"/>
			<target ref="id46"/>
			<label kind="probability" x="85" y="25">6</label>
		</transition>
		<transition>
			<source ref="id50"/>
			<target ref="id45"/>
			<label kind="assignment" x="187" y="-93">Toff[id]=tnight[id].Toff,
Ton[id]=tnight[id].Ton,
Tget[id]=tnight[id].Tget,
Tlow[id]=tnight[id].Tlow</label>
			<label kind="probability" x="86" y="-7">4</label>
		</transition>
		<transition>
			<source ref="id47"/>
			<target ref="id50"/>
			<label kind="guard" x="17" y="25">x&gt;0</label>
			<label kind="assignment" x="17" y="42">x=0,
bvec[id]=bvec[id]+1.0</label>
		</transition>
		<transition>
			<source ref="id43"/>
			<target ref="id49"/>
			<label kind="assignment" x="-297" y="-120">Toff[id]=tnight[id].Toff,
Ton[id]=tnight[id].Ton,
Tget[id]=tnight[id].Tget,
Tlow[id]=tnight[id].Tlow</label>
		</transition>
		<transition>
			<source ref="id49"/>
			<target ref="id44"/>
			<label kind="guard" x="-297" y="-8">t==5</label>
			<label kind="assignment" x="-297" y="8">Toff[id]=tday[id].Toff,
Ton[id]=tday[id].Ton,
Tget[id]=tday[id].Tget</label>
		</transition>
		<transition>
			<source ref="id45"/>
			<target ref="id49"/>
			<label kind="guard" x="-41" y="-64">t==24</label>
			<label kind="assignment" x="-33" y="-40">t=0</label>
		</transition>
		<transition>
			<source ref="id46"/>
			<target ref="id45"/>
			<label kind="guard" x="119" y="25">t&gt;=17</label>
			<label kind="assignment" x="170" y="-17">Toff[id]=tnight[id].Toff,
Ton[id]=tnight[id].Ton,
Tget[id]=tnight[id].Tget,
Tlow[id]=tnight[id].Tlow</label>
		</transition>
		<transition>
			<source ref="id48"/>
			<target ref="id47"/>
			<label kind="guard" x="-89" y="64">t&gt;=12</label>
			<label kind="assignment" x="-102" y="93">x=0, 
bvec[id]=bvec[id]+1.0</label>
		</transition>
		<transition>
			<source ref="id44"/>
			<target ref="id48"/>
			<label kind="guard" x="-281" y="64">t&gt;=8</label>
			<label kind="assignment" x="-281" y="80">Tlow[id]=tday[id].Tlow</label>
		</transition>
	</template>
	<template>
		<name>Global</name>
		<declaration>
void setOnGet(int i, int j){
    for(r:rid_t) {
        tday[r].Ton=i;
        tday[r].Tget=j;
    }
}</declaration>
		<location id="id51" x="0" y="-200">
			<committed/>
		</location>
		<location id="id52" x="0" y="-96">
			<label kind="invariant" x="-72" y="-80">energy'==(sum(i:hid_t) 5*h[i]) &amp;&amp;
discomfort'==(sum(i:rid_t) cold[i])</label>
		</location>
		<branchpoint id="id53" x="0" y="-160">
		</branchpoint>
		<init ref="id51"/>
		<transition>
			<source ref="id53"/>
			<target ref="id52"/>
			<label kind="select" x="8" y="-160">i: onRange_t,
j: getRange_t</label>
			<label kind="assignment" x="8" y="-128">setOnGet(i,j)</label>
			<label kind="probability" x="-16" y="-128">1</label>
		</transition>
		<transition>
			<source ref="id51"/>
			<target ref="id53"/>
		</transition>
	</template>
	<system>clock time;
clock c;
//weather=WeatherRapid(u);
//weather=WeatherDaily(u);
weather=WeatherReal(u);
//cyclon=Cyclon(c);
//weather=Weather(u);
//user(const rid_t i)=ProbUserProfile(i);
//user(const rid_t i)=UserProfile(i);
//user(const rid_t i)=FlatProfile(i);
user(const rid_t i)=MultiUserProfile(i);

//system Room,Heater,ControlOriginal, weather, user, Global;
//system Room,Heater,ControlGet, weather, user, Global;
system Room,Heater, ControlTon, weather, user, Global;
system>
	<queries>
		<query>
			<formula>Pr[&lt;=48](&lt;&gt; energy&gt;=210)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[&lt;=48](&lt;&gt; energy&gt;=150 &amp;&amp; discomfort&gt;=20)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[energy&lt;=1000000](&lt;&gt; time&gt;=48)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>Pr[discomfort&lt;=48] (&lt;&gt; time&gt;=48)
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 10 [&lt;=48] {discomfort}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 10 [&lt;=48] {energy}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {T[1],T[2],T[3],T[4],T[5]}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=24] {u}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {ControlGet.idle,ControlGet.choosing}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {Heater(1).Off,Heater(1).On,Heater(2).Off,Heater(2).On,Heater(3).Off,Heater(3).On}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {user(1).absent,user(1).arrive,user(1).morning,user(1).afternoon,user(1).leave,
                                  user(2).absent,user(2).arrive,user(2).morning,user(2).afternoon,user(2).leave,
                                  user(3).absent,user(3).arrive,user(3).morning,user(3).afternoon,user(3).leave,
                                  user(4).absent,user(4).arrive,user(4).morning,user(4).afternoon,user(4).leave,
                                  user(5).absent,user(5).arrive,user(5).morning,user(5).afternoon,user(5).leave}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {
T[1],T[2],T[3],T[4],T[5],
bvec[1],bvec[2],bvec[3],bvec[4],bvec[5],
Heater(1).c,Heater(2).c,Heater(3).c,
u,discomfort,PI,
ControlGet.idle,ControlGet.choosing,
user(1).absent,user(1).arrive,user(1).morning,user(1).afternoon,user(1).leave,
user(2).absent,user(2).arrive,user(2).morning,user(2).afternoon,user(2).leave,
user(3).absent,user(3).arrive,user(3).morning,user(3).afternoon,user(3).leave,
user(4).absent,user(4).arrive,user(4).morning,user(4).afternoon,user(4).leave,
user(5).absent,user(5).arrive,user(5).morning,user(5).afternoon,user(5).leave,
Heater(1).Off,Heater(1).On,Heater(2).Off,Heater(2).On,Heater(3).Off,Heater(3).On,
need[1],need[2],need[3],need[4],need[5],
cold[1],cold[2],cold[3],cold[4],cold[5]}
			</formula>
			<comment>
			</comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=48] {T[1],T[2],T[3],T[4],T[5],need[1],need[2],need[3],need[4],need[5],cold[1],cold[2],cold[3],cold[4],cold[5],bvec[1],bvec[2],bvec[3],bvec[4],bvec[5],Heater(1).c,Heater(2).c,Heater(3).c,Heater(1).Off,Heater(1).On,Heater(2).Off,Heater(2).On,Heater(3).Off,Heater(3).On,u,discomfort,PI,ControlGet.idle,ControlGet.choosing,user(1).absent,user(1).arrive,user(1).morning,user(1).afternoon,user(1).leave,
                                  user(2).absent,user(2).arrive,user(2).morning,user(2).afternoon,user(2).leave,
                                  user(3).absent,user(3).arrive,user(3).morning,user(3).afternoon,user(3).leave,
                                  user(4).absent,user(4).arrive,user(4).morning,user(4).afternoon,user(4).leave,
                                  user(5).absent,user(5).arrive,user(5).morning,user(5).afternoon,user(5).leave}
			</formula>
			<comment>
			</comment>
		</query>
	</queries>
</nta>
